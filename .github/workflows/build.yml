name: Build

on:
  workflow_dispatch:
  push:
    branches: [ beta, master, release-* ]
    paths: 
      - .github/workflows/build.yml
      - .github/generatePackageVersion.ps1
      - 'src/**'
      - 'Directory.build.props'
  pull_request:
    branches: [ master, release-* ]

jobs:
  build:
    env:
      GIT_REF: ${{ github.ref }}
      Solution: src/GeneXus.DeploymentTargets.sln
      Configuration: Release

    runs-on: [windows-latest]

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Calculate environment variables
      run: |     
        $IsPrerelease = !($Env:GIT_REF -match 'release-[0-9]+(?:\.[0-9]+)?$')
        echo "IsPrerelease=$IsPrerelease" >> $env:GITHUB_ENV
        $COMMIT_NUMBER = @($(git rev-list --count origin/master..), $(git rev-list --count HEAD))[$IsPrerelease]
        echo "COMMIT_NUMBER=$COMMIT_NUMBER" >> $env:GITHUB_ENV

    - name: Calculate package version
      env:
        PackageVersionString: ./.github/generatePackageVersion.ps1
      run: |
        $NuGetPackageVersion = & "$Env:PackageVersionString"
        
        Write-Output "Packge version to be used: $NuGetPackageVersion"
        echo "NuGetPackageVersion=$NuGetPackageVersion" >> $env:GITHUB_ENV

    - name: Generate package
      env:
        CommitNumber: ${{env.COMMIT_NUMBER}}
      run: dotnet pack $Env:Solution --configuration $Env:Configuration -p:Package=$Env:NuGetPackageVersion

    - name: Push to GPR
      if: github.repository_owner == 'GeneXusLabs' && !env.IsPrerelease && github.base_ref == ''
      run: dotnet nuget push *.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/${{ github.repository_owner }} --skip-duplicate

    - name: Checkout GeneXusLabs dispatch action
      uses: actions/checkout@v2
      if: github.repository_owner == 'GeneXusLabs' && !env.IsPrerelease && github.base_ref == ''
      with:
          repository: genexuslabs/dispatch-build-result
          ref: releases/v2
          token: ${{ secrets.PAT }}
          path: .github/actions/dispatch-build-result

    - name: Prepare build result
      if: github.repository_owner == 'GeneXusLabs' && !env.IsPrerelease && github.base_ref == ''
      run: |
        Import-Module ./.github/actions/dispatch-build-result/utils/CSProjUtils -Force
        $packageNames = Gather-Nupkg-Names (Get-Location).Path $false
        if ([string]::IsNullOrEmpty($packageNames)) {
          write-error "Cannot found package to integrate"
        }
        echo "DispatchPackageNames=$packageNames" >> $env:GITHUB_ENV

    - name: Dispatch build result
      uses: ./.github/actions/dispatch-build-result
      if: github.repository_owner == 'GeneXusLabs' && !env.IsPrerelease && github.base_ref == ''
      with:
        new-version: ${{ env.NuGetPackageVersion }}
        token: ${{ secrets.PAT }}
        committer: ${{ github.actor }}
        package-names: ${{ env.DispatchPackageNames }}

  dispatch-workflow:
    if: ${{ github.repository_owner == 'GeneXusLabs' && github.base_ref == '' && (github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/master') }}
    needs: build
    env:
      Solution: src/GeneXus.DeploymentTargets.sln

    runs-on: [ubuntu-latest]

    steps:
    - name: Dispatch Workflow
      run: >
        curl -X POST
        -H 'Accept: application/vnd.github.v3+json' 
        -H 'Authorization: token ${{ secrets.SECURE_TOKEN }}' 
        --silent --show-error --fail 
        ${{ secrets.BUILD_WORKFLOW_DISPATCH }} 
        -d '{
          "ref":"main",
          "inputs": { 
            "repository": "${{ github.repository }}",
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "build-file": "${{ env.Solution }}",
            "package-version": ".\\.github\\generatePackageVersion.ps1",
            "packages-path": ".\\src\\*.nupkg",
            "skip-duplicates": "true"
          }
        }'
