name: Build

on:
  push:
    branches: [ master, release-* ]
    paths: 
      - .github/workflows/package.yml
      - src/
      - GeneXus.DeploymentTargets.nuspec

jobs:
  build:
    env:
      Nuspec: GeneXus.DeploymentTargets.nuspec

    runs-on: [windows-latest]

    steps:

    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup NuGet.exe
      uses: nuget/setup-nuget@v1

    - name: Setup GitHub NuGet Registry (GPR)
      run: nuget sources Add -Name "GPR" -Source "https://nuget.pkg.github.com/genexuslabs/index.json" -UserName %GITHUB_ACTOR% -Password ${{ secrets.GITHUB_TOKEN }} 

    - name: Build NuGet package
      run: |
        #Generate a new package version reading the current commit number
        $CommitNumber = git rev-list --no-merges --count HEAD
        write-host "[info] Read commit number: $CommitNumber"
        $packageVersion = dotnet msbuild Directory.Build.props /t:GetVersion /p:CommitNumber=$CommitNumber
        "$packageVersion" -match "(?<=FileVersion:)(.*)"
        $packageVersion = $Matches[0].Trim()
        write-host "[info] Package version: $packageVersion"

        if ([string]::IsNullOrEmpty($packageVersion)) {
          throw "Cannot create new package because the current package version is empty"
        }

        nuget pack $Env:Nuspec -Version "$packageVersion"
        echo "NuGetPackageVersion=$packageVersion" >> $env:GITHUB_ENV

    - name: Push to Nuget Repository
      run: | 
        $nupkg = (Get-ChildItem *.nupkg).Name
        dotnet nuget push $nupkg --source GPR

    - name: Checkout private action
      uses: actions/checkout@v2
      with:
          repository: genexuslabs/dispatch-build-result
          ref: releases/v2
          token: ${{ secrets.PAT }}
          path: .github/actions/dispatch-build-result
          
    - name: Prepare build result
      if: github.repository_owner == 'GeneXusLabs'
      run: |
        Import-Module ./.github/actions/dispatch-build-result/utils/CSProjUtils -Force
        $packageNames = Gather-Nupkg-Names (Get-Location).Path $false
        
        if ([string]::IsNullOrEmpty($packageNames)) {
          throw "Cannot found package to integrate"
        }

        echo "DispatchPackageNames=$packageNames" >> $env:GITHUB_ENV

    - name: Dispatch build result
      uses: ./.github/actions/dispatch-build-result
      with:
        new-version: ${{ env.NuGetPackageVersion }}
        token: ${{ secrets.PAT }}
        committer: ${{ github.actor }}
        package-names: ${{ env.DispatchPackageNames }}
