name: Build

on:
  workflow_dispatch:
  push:
    branches: [ master, release-* ]
    paths: 
      - .github/workflows/package.yml
      - 'src/**'
      - 'Directory.build.props'
  pull_request:
    branches: [ master, release-* ]
    paths: 
      - .github/workflows/package.yml
      - 'src/**'
      - 'Directory.build.props'

jobs:
  build:
    env:
      Solution: src/GeneXus.DeploymentTargets.sln
      Configuration: Release

    runs-on: [windows-latest]

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Calculate environment variables
      run: |     
        $IsPrerelease = !($Env:GIT_REF -match 'release-[0-9]+(?:\.[0-9]+)?$')
        echo "IsPrerelease=$IsPrerelease" >> $env:GITHUB_ENV
        $COMMIT_NUMBER = @($(git rev-list --count origin/master..), $(git rev-list --count HEAD))[$IsPrerelease]
        echo "COMMIT_NUMBER=$COMMIT_NUMBER" >> $env:GITHUB_ENV

    - name: Calculate package version
      env:
        PackageVersionString: ./.github/generatePackageVersion.ps1
      run: |
        $NuGetPackageVersion = & "$Env:PackageVersionString"
        
        Write-Output "Packge version to be used: $NuGetPackageVersion"
        echo "NuGetPackageVersion=$NuGetPackageVersion" >> $env:GITHUB_ENV

    - name: Generate package
      run: dotnet pack $Env:Solution --no-restore --no-build --configuration $Env:Configuration -p:Package=$Env:NuGetPackageVersion

    - name: Push to GPR
      if: false && github.base_ref == ''
      run: dotnet nuget push *.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/${{ github.repository_owner }} --skip-duplicate

# --------------------------------------------------------
# Following steps are for GeneXusLabs integration process
#
    - name: Checkout GeneXusLabs dispatch action
      uses: actions/checkout@v2
      if: github.repository_owner == 'GeneXusLabs' && github.base_ref == ''
      with:
          repository: genexuslabs/dispatch-build-result
          ref: releases/v2
          token: ${{ secrets.PAT }}
          path: .github/actions/dispatch-build-result

    - name: Prepare build result
      if: github.repository_owner == 'GeneXusLabs' && github.base_ref == ''
      run: |
        Import-Module ./.github/actions/dispatch-build-result/utils/CSProjUtils -Force
        $packageNames = Gather-Nupkg-Names (Get-Location).Path $false
        if ([string]::IsNullOrEmpty($packageNames)) {
          write-error "Cannot found package to integrate"
        }
        echo "DispatchPackageNames=$packageNames" >> $env:GITHUB_ENV

    - name: Dispatch build result
      uses: ./.github/actions/dispatch-build-result
      if: false
      #if: github.repository_owner == 'GeneXusLabs' && github.base_ref == ''
      with:
        new-version: ${{ env.NuGetPackageVersion }}
        token: ${{ secrets.PAT }}
        committer: ${{ github.actor }}
        package-names: ${{ env.DispatchPackageNames }}
#
# --------------------------------------------------------
