name: Build

on:
  push:
    branches: [ master, release-* ]
    paths: 
      - .github/workflows/package.yml
      - src/
      - GeneXus.DeploymentTargets.nuspec

jobs:
  build:
    env:
      Nuspec: GeneXus.DeploymentTargets.nuspec

    runs-on: [windows-latest]

    steps:

    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Configure DotNetCLI to use GPR
      uses: actions/setup-dotnet@v1
      with:
        source-url: https://nuget.pkg.github.com/genexuslabs/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Calculate Package Version
      run: |
        #Generate a new package version reading the current commit number
        $CommitNumber = git rev-list --no-merges --count HEAD
        write-host "[info] Read commit number: $CommitNumber"
        $packageVersion = dotnet msbuild Directory.Build.props /t:GetVersion /p:CommitNumber=$CommitNumber
        "$packageVersion" -match "(?<=FileVersion:)(.*)"
        $packageVersion = $Matches[0].Trim()
        write-host "[info] Package version: $packageVersion"

        if ([string]::IsNullOrEmpty($packageVersion)) {
          write-error "Cannot create new package because the current package version is empty"
        }

        nuget pack $Env:Nuspec -Version "$packageVersion"
        echo "NuGetPackageVersion=$packageVersion" >> $env:GITHUB_ENV

    - name: Push to GPR
      run: dotnet nuget push *.nupkg --skip-duplicate

# --------------------------------------------------------
# Following steps are for GeneXusLabs integration proccess
#

    - name: Checkout GeneXusLabs dispatch action
      uses: actions/checkout@v2
      if: github.repository_owner == 'GeneXusLabs'
      with:
          repository: genexuslabs/dispatch-build-result
          ref: releases/v2
          token: ${{ secrets.PAT }}
          path: .github/actions/dispatch-build-result

    - name: Prepare build result
      if: github.repository_owner == 'GeneXusLabs'
      run: |
        Import-Module ./.github/actions/dispatch-build-result/utils/CSProjUtils -Force
        $packageNames = Gather-Nupkg-Names (Get-Location).Path $false
        if ([string]::IsNullOrEmpty($packageNames)) {
          write-error "Cannot found package to integrate"
        }
        echo "DispatchPackageNames=$packageNames" >> $env:GITHUB_ENV

    - name: Dispatch build result
      uses: ./.github/actions/dispatch-build-result
      if: github.repository_owner == 'GeneXusLabs'
      with:
        new-version: ${{ env.NuGetPackageVersion }}
        token: ${{ secrets.PAT }}
        committer: ${{ github.actor }}
        package-names: ${{ env.DispatchPackageNames }}
