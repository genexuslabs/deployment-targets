<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="CreateNETPackage"  ToolsVersion="4.0">
    <PropertyGroup>
		<NETGenerator Condition="'$(GENERATOR)' == '.NET Core' or '$(GENERATOR)' == '.NET'">true</NETGenerator>
	</PropertyGroup>

	<PropertyGroup Condition="'$(NETGenerator)' == 'true'">
		<DeploymentTargetBinPath>$(GX_PROGRAM_DIR)\DeploymentTargets\AzureFunctions\AzFunctionFiles\bin</DeploymentTargetBinPath>
		<DeploymentTargetSrcPath>$(GX_PROGRAM_DIR)\DeploymentTargets\AzureFunctions\AzFunctionFiles\src</DeploymentTargetSrcPath>
		<DeploySrcBuildPath>$(DeployFullPath)\src\build</DeploySrcBuildPath>
		<DeploySrcWebPath>$(DeployFullPath)/src/web</DeploySrcWebPath>
		<AzureFunctionsHandlerProject>GeneXus.Deploy.AzureFunctions.Handlers.csproj</AzureFunctionsHandlerProject>
		<AzureFunctionsLibrariesProject>GeneXus.Deploy.AzureFunctionsLibraries.csproj</AzureFunctionsLibrariesProject>
		<DeployFullPath_App>$(DeployFullPath)</DeployFullPath_App>
		<DeployFullPath_App Condition="$(AZURE_FUNCTIONS_TRIGGER_TYPE) == 'http' OR '$(DeployTarget)' == 'AZURE_SERVERLESS'">$(DeployFullPath)\web</DeployFullPath_App>
	</PropertyGroup>

	<ItemGroup>
		<AzureFunctionsRootDeps Include = "$(DeploymentTargetBinPath)\**\*.*" />
		<AzureFunctionsRootSrc Include = "$(DeploymentTargetSrcPath)\**\*.*" />
	</ItemGroup>	

	<Target Name="CreateNETPackage" DependsOnTargets="ValidatePackaging;NETpackageZipDeploy" Condition="'$(NETGenerator)' == 'true'"/>

	<Target Name="RestControllersToAzureFunctions" Condition="'$(NETGenerator)' == 'true' AND ('$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'http' OR '$(DeployTarget)' == 'AZURE_SERVERLESS')">
		
		<Message Text="Converting controller-based web APIs to Azure functions..." Importance="high" />

		<PropertyGroup>
			<backendServices Condition="'$(DeployTarget)' == 'AZURE_SERVERLESS'">true</backendServices>
			<backendServices Condition="'$(DeployTarget)' != 'AZURE_SERVERLESS'">false</backendServices>
		</PropertyGroup>
		<GenerateAzHTTPFunctionFromMVC 
			serviceSourcePath="$(DeploySrcWebPath)"
			backendServices="$(backendServices)"
			routePrefix="$(AZURE_FUNCTIONS_ROUTE_PREFIX)" />
	</Target>

	<Target Name = "CopyAzureHandlersSrc" Condition="'$(NETGenerator)' == 'true'">
		
		<Message Text="Adding Azure Functions Handlers sources to $(DeploymentUnit).sln" Importance="high" ></Message>
		
		<Copy SourceFiles="@(AzureFunctionsRootSrc)"
		DestinationFolder="$(DeploySrcBuildPath)/%(RecursiveDir)" SkipUnchangedFiles="true" />

		<Copy SourceFiles="$(DeployAppDir)/functions.metadata"
		DestinationFolder="$(DeploySrcBuildPath)/GeneXus.Deploy.AzureFunctions.Handlers" SkipUnchangedFiles="true" Condition="Exists('$(DeployAppDir)/functions.metadata')"/>
	
	</Target>
	
	<Target Name="AddAzureHandlersSources" Condition="'$(DeployType)'=='SOURCES' AND '$(NETGenerator)' == 'true'" DependsOnTargets="RestControllersToAzureFunctions"> 
		
		<CallTarget Targets="CopyAzureHandlersSrc" />

		<Exec Command="dotnet sln $(DeploymentUnit).sln add &quot;$(DeploySrcBuildPath)/GeneXus.Deploy.AzureFunctions.Handlers/$(AzureFunctionsHandlerProject)&quot;" WorkingDirectory="$(DeploySrcBuildPath)" />
		<Exec Command="dotnet sln $(DeploymentUnit).sln add &quot;$(DeploySrcBuildPath)/GeneXus.Deploy.AzureFunctionsLibraries/$(AzureFunctionsLibrariesProject)&quot;" WorkingDirectory="$(DeploySrcBuildPath)" />
	
	</Target>

	<Target Name="SetupHttpFunctionsProject" Condition="'$(NETGenerator)' == 'true' AND ('$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'http' OR '$(DeployTarget)' == 'AZURE_SERVERLESS')" DependsOnTargets="RestControllersToAzureFunctions" >
		
		<CallTarget Targets="CopyAzureHandlersSrc" />
		
		<Exec Command="dotnet sln $(DeploymentUnit).sln add &quot;$(DeploySrcBuildPath)/GeneXus.Deploy.AzureFunctions.Handlers/GeneXus.Deploy.AzureFunctions.Handlers.csproj&quot;" WorkingDirectory="$(DeploySrcBuildPath)" />
		<Exec Command="dotnet sln $(DeploymentUnit).sln add &quot;$(DeploySrcBuildPath)/GeneXus.Deploy.AzureFunctionsLibraries/$(AzureFunctionsLibrariesProject)&quot;" WorkingDirectory="$(DeploySrcBuildPath)" />

		<CallTarget Targets="ProcessDeploySolution" />
	</Target>

	<Target Name="ProcessDeploySolution">
    
		<Message Text="Re-structuring the solution to implement Azure functions.." Importance="high" />
	
		<SetupAzureFuncDeploymentSln 
			DeploySolutionPath = "$(DeploySrcBuildPath)"
			KbNamespace = "$(Namespace)" >
			<Output TaskParameter="AzureProjectFiles" ItemName="AzureProjectFiles" />
		</SetupAzureFuncDeploymentSln>

		<Exec Command="dotnet add &quot;%(AzureProjectFiles.Identity)&quot; reference &quot;$(DeploySrcBuildPath)/GeneXus.Deploy.AzureFunctionsLibraries/$(AzureFunctionsLibrariesProject)&quot;" WorkingDirectory="$(DeploySrcBuildPath)" ConsoleToMSBuild="true"/>

   </Target>

	<Target Name="BuildAzureHandlersSourcesHTTP" Condition="'$(DeployType)' != 'SOURCES' AND '$(NETGenerator)' == 'true' AND ('$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'http' OR '$(DeployTarget)' == 'AZURE_SERVERLESS')" DependsOnTargets="SetupHttpFunctionsProject">
		
		<PropertyGroup>
			<HttpSupport Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'http' OR '$(DeployTarget)' == 'AZURE_SERVERLESS'">true</HttpSupport>
			<IntegratedSecurityEnabled Condition="Exists('gamflag.txt')">true</IntegratedSecurityEnabled>
			<BackendServices Condition = "'$(DeployTarget)' == 'AZURE_SERVERLESS'">true</BackendServices>
		</PropertyGroup>

		 <Delete Files="gamflag.txt" Condition="Exists('gamflag.txt')"/>

		<Message Text="Building the solution..." Importance="high" />

		<Exec Command="dotnet build &quot;$(DeployFullPath)/src/build/$(DeploymentUnit).sln&quot; -c Release --force -p:DebugType=None --p:OutputPath=&quot;$(DeployFullPath)\web\bin&quot; -p:CosmosDBSupport=$(CosmosDBSupport) -p:TimerSupport=$(TimerSupport) -p:AzureQueueSupport=$(AzureQueueSupport) -p:ServiceBusSupport=$(ServiceBusSupport) -p:HttpSupport=$(HttpSupport) -p:BlobSupport=$(BlobSupport) -p:EventGridSupport=$(EventGridSupport) -p:IntegratedSecuritySupport=$(IntegratedSecurityEnabled) -p:BackendServices=$(BackendServices)" WorkingDirectory="$(DeploySrcBuildPath)" ConsoleToMSBuild="true"/>
		
		<Delete Files="$(DeployFullPath)/web/bin/local.settings.json" Condition="Exists('$(DeployFullPath)/web/bin/local.settings.json')" />

	</Target>

	<Target Name="BuildAzureHandlersSources" Condition="'$(DeployType)'!='SOURCES' AND '$(NETGenerator)' == 'true' AND '$(AZURE_FUNCTIONS_TRIGGER_TYPE)' != 'http'">

		<PropertyGroup>
			<CosmosDBSupport Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'cosmosdb'">true</CosmosDBSupport>
			<TimerSupport Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'timer'">true</TimerSupport>
			<AzureQueueSupport Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'queue'">true</AzureQueueSupport>
			<ServiceBusSupport Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'servicebus'">true</ServiceBusSupport>
			<BlobSupport Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'blobstorage'">true</BlobSupport>
			<EventGridSupport Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'eventgrid'">true</EventGridSupport>
		</PropertyGroup>

		<Copy SourceFiles="@(AzureFunctionsRootSrc)"
		DestinationFolder="$(DeploySrcBuildPath)\%(RecursiveDir)" SkipUnchangedFiles="true" />

		<Copy SourceFiles="$(SourcePath)\Directory.build.props" 
		DestinationFolder="$(DeploySrcBuildPath)" SkipUnchangedFiles="true" />

		<Exec Command="dotnet build &quot;GeneXus.Deploy.AzureFunctions.Handlers\$(AzureFunctionsHandlerProject)&quot; -c Release --force -p:DebugType=None -p:OutputPath=&quot;$(DeployFullPath)\bin&quot; -p:CosmosDBSupport=$(CosmosDBSupport) -p:TimerSupport=$(TimerSupport) -p:AzureQueueSupport=$(AzureQueueSupport) -p:ServiceBusSupport=$(ServiceBusSupport) -p:HttpSupport=$(HttpSupport) -p:BlobSupport=$(BlobSupport) -p:EventGridSupport=$(EventGridSupport)" WorkingDirectory="$(DeploySrcBuildPath)" ConsoleToMSBuild="true"/>

		<Delete Files="$(DeployFullPath)\bin\local.settings.json" Condition="Exists('$(DeployFullPath)\bin\local.settings.json')" />

	</Target>

	<Target Name="GenerateSources" Condition = "'$(NETGenerator)' == 'true'">
		
		<MakeDir
            Directories="$(DeploySrcBuildPath)/GeneXus.Deploy.AzureFunctions.Handlers"/>
		<MakeDir
            Directories="$(DeploySrcBuildPath)/GeneXus.Deploy.AzureFunctions.Handlers/Functions"/>

		<ItemGroup Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'servicebus'"> 
			<FunctionData Condition="'$(AZURE_FUNCTIONS_SERVICEBUS_TYPE)' == 'queue'" Include ="$(AZURE_FUNCTIONS_FUNCTION_NAME)" >
				<TriggerType>$(AZURE_FUNCTIONS_TRIGGER_TYPE)</TriggerType>
				<ServiceBusType>$(AZURE_FUNCTIONS_SERVICEBUS_TYPE)</ServiceBusType>
				<QueueName>$(AZURE_FUNCTIONS_SERVICEBUS_QUEUENAME)</QueueName>
				<ConnectionName>$(AZURE_FUNCTIONS_SERVICEBUS_CONNECTION)</ConnectionName>
				<IsSessionsEnabled>$(AZURE_FUNCTIONS_SERVICEBUS_ISSESSIONENABLED)</IsSessionsEnabled>
				<IsBatch>$(AZURE_FUNCTIONS_SERVICEBUS_ISBATCH)</IsBatch>
			</FunctionData>
			<FunctionData Condition="'$(AZURE_FUNCTIONS_SERVICEBUS_TYPE)' == 'topic'" Include ="$(AZURE_FUNCTIONS_FUNCTION_NAME)">
				<TriggerType>$(AZURE_FUNCTIONS_TRIGGER_TYPE)</TriggerType>
				<ServiceBusType>$(AZURE_FUNCTIONS_SERVICEBUS_TYPE)</ServiceBusType>
				<TopicName>$(AZURE_FUNCTIONS_SERVICEBUS_TOPICNAME)</TopicName>
				<SubscriptionName>$(AZURE_FUNCTIONS_SERVICEBUS_SUBSCRIPTIONNAME)</SubscriptionName>
				<ConnectionName>$(AZURE_FUNCTIONS_SERVICEBUS_CONNECTION)</ConnectionName>
				<IsSessionsEnabled>$(AZURE_FUNCTIONS_SERVICEBUS_ISSESSIONENABLED)</IsSessionsEnabled>
				<IsBatch>$(AZURE_FUNCTIONS_SERVICEBUS_ISBATCH)</IsBatch>
			</FunctionData>
		</ItemGroup>

		<ItemGroup Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'timer'"> 
			<FunctionData Include ="$(AZURE_FUNCTIONS_FUNCTION_NAME)" >
				<TriggerType>$(AZURE_FUNCTIONS_TRIGGER_TYPE)</TriggerType>
				<TimerSchedule Condition = "$(AZURE_FUNCTIONS_SCHEDULE_TIME_FORMAT) == 'timevalue'">$(AZURE_FUNCTIONS_SCHEDULE_TIME)</TimerSchedule>
				<TimerSchedule Condition = "$(AZURE_FUNCTIONS_SCHEDULE_TIME_FORMAT) == 'appsettingvaluepair'">%$(AZURE_FUNCTIONS_SCHEDULE_TIME_APPSETTINGNAME)%</TimerSchedule>
			</FunctionData>
		</ItemGroup>

		<ItemGroup Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'queue'"> 
			<FunctionData Include ="$(AZURE_FUNCTIONS_FUNCTION_NAME)" >
				<TriggerType>$(AZURE_FUNCTIONS_TRIGGER_TYPE)</TriggerType>
				<QueueName>$(AZURE_FUNCTIONS_QUEUE_NAME)</QueueName>
				<ConnectionName>$(AZURE_FUNCTIONS_QUEUE_CONNECTION)</ConnectionName>
			</FunctionData>
		</ItemGroup>

		<ItemGroup Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'blobstorage'"> 
			<FunctionData Include ="$(AZURE_FUNCTIONS_FUNCTION_NAME)" >
				<TriggerType>$(AZURE_FUNCTIONS_TRIGGER_TYPE)</TriggerType>
				<BlobPath>$(AZURE_FUNCTIONS_BLOB_STORAGE_PATH)</BlobPath>
				<ConnectionName>$(AZURE_FUNCTIONS_BLOB_STORAGE_CONNECTION)</ConnectionName>
			</FunctionData>
		</ItemGroup>

		<ItemGroup Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'eventgrid'"> 
			<FunctionData Include ="$(AZURE_FUNCTIONS_FUNCTION_NAME)" >
				<TriggerType>$(AZURE_FUNCTIONS_TRIGGER_TYPE)</TriggerType>
				<EventGridSchema>$(AZURE_FUNCTIONS_EVENTGRID_SCHEMA)</EventGridSchema>
			</FunctionData>
		</ItemGroup>
		
		<ItemGroup Condition="'$(AZURE_FUNCTIONS_TRIGGER_TYPE)' == 'cosmosdb'"> 
			<FunctionData Include ="$(AZURE_FUNCTIONS_FUNCTION_NAME)" >
				<TriggerType>$(AZURE_FUNCTIONS_TRIGGER_TYPE)</TriggerType>
				<DatabaseName>$(AZURE_FUNCTIONS_COSMOSDB_DATABASE)</DatabaseName>
				<ContainerName>$(AZURE_FUNCTIONS_COSMOSDB_CONTAINER)</ContainerName>
				<ConnectionName>$(AZURE_FUNCTIONS_COSMOSDB_CONNECTION)</ConnectionName>
				<LeaseDatabaseName>$(AZURE_FUNCTIONS_COSMOSDB_LEASE_DATABASE)</LeaseDatabaseName>
				<LeaseContainerName>$(AZURE_FUNCTIONS_COSMOSDB_LEASE_CONTAINER)</LeaseContainerName>
				<LeaseContainerPrefix>$(AZURE_FUNCTIONS_COSMOSDB_LEASE_CONTAINER_PREFIX)</LeaseContainerPrefix>
				<LeaseConnection>$(AZURE_FUNCTIONS_COSMOSDB_LEASE_CONNECTION)</LeaseConnection>
			</FunctionData>
		</ItemGroup>
	
		<GenerateNetFunctionSources Condition="%(Object.Type) == 'Procedure' AND %(Object.selected) == 'true' AND $(AZURE_FUNCTIONS_TRIGGER_TYPE) != 'http'"
			
			TemplateBasePath = "$(GX_PROGRAM_DIR)/DeploymentTargets/AzureFunctions/Templates/NET"
			FunctionData = "@(FunctionData)"
			SourcesPath = "$(DeploySrcBuildPath)/GeneXus.Deploy.AzureFunctions.Handlers/Functions"
		/>
	</Target>

	<Target Name="PrepareDeploy" DependsOnTargets="GenerateSources;GenerateConfigs;RedisSupport;AddAzureHandlersSources;BuildAzureHandlersSources;SetupHttpFunctionsProject;BuildAzureHandlersSourcesHTTP" >

		<Message Text="Adding required files to the deploy...(this may take a while)" Importance="high"/>

		<ItemGroup>
			<ConfResources Include="$(DeployFullPath_App)\*.svc" />
			<ConfResources Include="$(DeployFullPath_App)\Images.txt" Condition="Exists('$(DeployFullPath_App)\Images.txt')"/>
			<ConfResources Include="$(DeployFullPath_App)\log.config" Condition="Exists('$(DeployFullPath_App)\log.config')"/>
			<ConfResources Include="$(DeployFullPath_App)\log.console.config" Condition="Exists('$(DeployFullPath_App)\log.console.config')"/>	
			<ConfResources Include="$(DeployFullPath_App)\GeneXus.services" Condition ="Exists('$(DeployFullPath_App)\GeneXus.services')" />
			<ConfResources Include="$(DeployFullPath_App)\gxazmappings.json" Condition ="$(AZURE_FUNCTIONS_TRIGGER_TYPE) != 'http' AND '$(DeployTarget)' != 'AZURE_SERVERLESS'" />
			<ConfResources Include="$(DeployFullPath_App)\functions.metadata"  Condition ="Exists('$(DeployFullPath_App)\functions.metadata')"/>
			<ConfResources Include="$(DeployFullPath_App)\azureflag.json"  Condition ="Exists('$(DeployFullPath_App)\azureflag.json')" />
			<ConfResources Include="$(DeployFullPath_App)\appsettings.json" />
			<ConfResources Include="$(DeployFullPath_App)\CloudServices.config" Condition ="Exists('$(DeployFullPath_App)\CloudServices.config')" />
		</ItemGroup>

		<ItemGroup>
			<Modules Include="@(Object -> '%(Module)')" />
			<ModuleDirs Include="%(Modules.Identity)" />
			<ModuleRelativePath Include="@(ModuleDirs->Replace('.', '\'))" />
			<ModuleRelPathLower Include="@(ModuleRelativePath->ToLower())" />
			<ModuleFiles Include="$(DeployFullPath_App)\%(ModuleRelPathLower.Identity)\**\*.*" Condition="%(ModuleRelPathLower.Identity) != ''">
				<RelativePath>%(ModuleRelPathLower.Identity)</RelativePath>
			</ModuleFiles>
		</ItemGroup>

		<Copy SourceFiles="@(ModuleFiles)" DestinationFiles="@(ModuleFiles -> '$(DeployFullPath_App)\bin\%(RelativePath)\%(RecursiveDir)%(Filename)%(Extension)')" />

		<ItemGroup>
			<CacheMetadata Include="$(DeployFullPath_App)\Metadata\TableAccess\*.*" Condition="Exists('$(DeployFullPath_App)\Metadata\TableAccess')"/>
		</ItemGroup>

		<ItemGroup>
			<PrivateDirectory Include="$(DeployFullPath_App)\private\*.*" Condition="Exists('$(DeployFullPath_App)\private')"/>
		</ItemGroup>
		
		<Copy SourceFiles="@(CacheMetadata)"  
		DestinationFiles="@(CacheMetadata -> '$(DeployFullPath_App)\bin\Metadata\TableAccess\%(Filename)%(Extension)')" SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(PrivateDirectory)"  
		DestinationFiles="@(PrivateDirectory -> '$(DeployFullPath_App)\bin\private\%(Filename)%(Extension)')" SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(ConfResources)"  
		DestinationFiles="@(ConfResources -> '$(DeployFullPath_App)\bin\%(Filename)%(Extension)')" SkipUnchangedFiles="true" />
		
	</Target>

	<Target Name="NETpackageZipDeploy" DependsOnTargets = "PrepareDeploy" >

		<PropertyGroup>
			<PackagedFunctionName>$(AZURE_FUNCTIONS_FUNCTION_NAME)</PackagedFunctionName>
			<PackagedFunctionName Condition="'$(DeployTarget)' == 'AZURE_SERVERLESS'">$(AZURE_SERVERLESS_FUNCTION_NAME)</PackagedFunctionName>
		</PropertyGroup>

		<CreateItem Include="$(DeployFullPath_App)\bin\**\*.*;$(DeployFullPath)\src\**\*.*" Condition="'$(DeployType)'=='SOURCES'">
			<Output ItemName="ZipFiles" TaskParameter="Include"/>
		</CreateItem>
		<Zip ZipFileName="$(DeployFileFullPath)\$(ProjectName)_$(PackagedFunctionName).zip" WorkingDirectory="$(DeployFullPath)" Files="@(ZipFiles)" Condition="'$(DeployType)'=='SOURCES'"/>


		<CreateItem Include="$(DeployFullPath_App)\bin\**\*.*" Condition="'$(DeployType)'!='SOURCES'" >
			<Output ItemName="ZipFiles" TaskParameter="Include"/>
		</CreateItem>
		<Zip ZipFileName="$(DeployFileFullPath)\$(ProjectName)_$(PackagedFunctionName).zip" WorkingDirectory="$(DeployFullPath_App)\bin" Files="@(ZipFiles)" Condition="'$(DeployType)'!='SOURCES'"/>
		
		<Message Text="Application successfully Packaged to be uploaded to Azure : $(DeployFileFullPath)\$(ProjectName)_$(PackagedFunctionName).zip" Importance="high"/>

	</Target>

    <Target Name="RedisSupport" Condition="$(AZURE_FUNCTIONS_TRIGGER_TYPE) == 'http' AND '$(AZURE_FUNCTIONS_SESSION_STATE_PROVIDER)' == 'Redis' AND '$(AZURE_FUNCTIONS_SESSION_PROVIDER_ADDRESS)' != ''">

		<Message Text="Enabling Redis support" Importance="high"/>

		<ItemGroup>
				<RedisSessionTemplate Include="$(GX_PROGRAM_DIR)\DeploymentTargets\AzureFunctions\redis\$(GENERATOR)\*.*"/>
		</ItemGroup>

		<Copy SourceFiles="@(RedisSessionTemplate)" DestinationFolder="$(DeployFullPath_App)" Condition="'$(AZURE_FUNCTIONS_SESSION_STATE_PROVIDER)' == 'Redis'"/>	

		<ItemGroup>
				<CSRedis Include="$(DeployFullPath_App)\CloudServices.redis.config"/>
		</ItemGroup>

		<CallTarget Targets="UpdateRedisCS" />

		<XmlPeek XmlInputPath="@(CSRedis)" Query="Services/Service" Condition="Exists('@(CSRedis)')">
			<Output TaskParameter="Result" ItemName="RedisService" />
		</XmlPeek>	

		<ItemGroup>
			<DestinationCS Include="$(DeployFullPath_App)\CloudServices.config"/>
			<OriginalCS Include="$(DeployFullPath_App)\CloudServices.config"/>
		</ItemGroup>
		
		<PropertyGroup>
			<CloudServiceExists Condition="Exists('@(OriginalCS)')">true</CloudServiceExists>
			<CloudServiceExists Condition="!Exists('@(OriginalCS)')">false</CloudServiceExists>
		</PropertyGroup>

		<XmlPeek XmlInputPath="@(OriginalCS)" Query="Services/Service" Condition="'$(CloudServiceExists)' == 'true'">
			<Output TaskParameter="Result" ItemName="OriginalServices" />
		</XmlPeek>

	</Target>

	<Target Name="UpdateRedisCS" Condition="$(AZURE_FUNCTIONS_TRIGGER_TYPE) == 'http' AND '$(AZURE_FUNCTIONS_SESSION_STATE_PROVIDER)' == 'Redis' AND '$(AZURE_FUNCTIONS_SESSION_PROVIDER_ADDRESS)' != ''">

		 <XmlPoke
			XmlInputPath="$(DeployFullPath_App)\CloudServices.redis.config"
			Value="$(AZURE_FUNCTIONS_SESSION_PROVIDER_ADDRESS)"
			Query="Services/Service/Properties/Property[Name='SESSION_PROVIDER_ADDRESS']/Value" />

		<XmlPoke Condition = "$(AZURE_FUNCTIONS_SESSION_PROVIDER_PASSWORD) != ''"
			XmlInputPath="$(DeployFullPath_App)\CloudServices.redis.config"
			Value="$(AZURE_FUNCTIONS_SESSION_PROVIDER_PASSWORD)"
			Query="Services/Service/Properties/Property[Name='SESSION_PROVIDER_PASSWORD']/Value" />

		<XmlPoke Condition = "$(AZURE_FUNCTIONS_SESSION_PROVIDER_INSTANCE_NAME) != ''"
			XmlInputPath="$(DeployFullPath_App)\CloudServices.redis.config"
			Value="$(AZURE_FUNCTIONS_SESSION_PROVIDER_INSTANCE_NAME)"
			Query="Services/Service/Properties/Property[Name='SESSION_PROVIDER_INSTANCE_NAME']/Value" />

		<XmlPoke Condition = "$(AZURE_FUNCTIONS_SESSION_TIMEOUT) != ''"
			XmlInputPath="$(DeployFullPath_App)\CloudServices.redis.config"
			Value="$(AZURE_FUNCTIONS_SESSION_TIMEOUT)"
			Query="Services/Service/Properties/Property[Name='SESSION_PROVIDER_SESSION_TIMEOUT']/Value" />
	</Target>

	<Target Name="AppendRedisCS" AfterTargets="RedisSupport" Condition="'@(RedisService->Count())' > 0">

		<Message Text="Setting up new CloudServices.config" Importance="high"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" Overwrite="true" Encoding="UTF-8"/>

		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;Services xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;" Overwrite="false"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="@(OriginalServices)" Overwrite="false"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="@(RedisService)" Overwrite="false"/>

		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;/Services&gt;" Overwrite="false"/>

	</Target>

	
</Project>