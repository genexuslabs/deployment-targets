<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Deploy"  ToolsVersion="4.0">

	<Import Project="$(GX_PROGRAM_DIR)\MSBuild.Community.Tasks.Targets"/>
	<Import Project="$(GX_PROGRAM_DIR)\GeneXus.StringTemplate.Tasks.targets"/>

	<Target Name="CreateDockerfile">

		<ItemGroup>
			<SourceFile Include="$(DeploySource)" />
		</ItemGroup>

		<Error Text="Property 'Image WebApp location' cannot be empty" Condition="'$(DOCKER_WEBAPPLOCATION)' == ''"/>

		<Error Text="DeploySource cannot be empty" Condition="'$(DeploySource)' == ''"/>

		<Error Text="DeploySource must be a .war file" Condition="'$(GENERATOR)' == 'Java' AND '%(SourceFile.Extension)' != '.war'" />
		<Error Text="DeploySource must be a .zip file" Condition="('$(GENERATOR)' == 'C#' OR '$(GENERATOR)' == '.NET Core') AND '%(SourceFile.Extension)' != '.zip'"/>

		<PropertyGroup>
			<DeployDirectory>%(SourceFile.RootDir)%(SourceFile.Directory)context</DeployDirectory>
			<Dockerfile>$(DeployDirectory)\Dockerfile</Dockerfile>
			<TemplatePath>$(GX_PROGRAM_DIR)\DeploymentTargets\Docker\Templates</TemplatePath>
		</PropertyGroup>

		<MakeDir Directories="$(DeployDirectory)" Condition="!Exists('DeployDirectory')"/>
		
		<Message Text="$(DeployDirectory)"/>

		<!-- Java -->
		<PropertyGroup Condition="'$(GENERATOR)' == 'Java'">
			<WarName Condition=" '$(WarName)' == ''">ROOT</WarName>
			<Extension>.war</Extension>
			<DockerSource>$(WarName)$(Extension)</DockerSource>
			<DockerSourceFullPath>$(DeployDirectory)\$(DockerSource)</DockerSourceFullPath>
			<DeployCommand>ADD</DeployCommand>
		</PropertyGroup>

		<!-- C# or .NET Core -->
		<PropertyGroup Condition="'$(GENERATOR)' == 'C#' OR '$(GENERATOR)' == '.NET Core'">
			<DeployCommand>COPY</DeployCommand>
			<TempDir>$(DeployDirectory)\temp</TempDir>
			<DockerSource>temp/</DockerSource>
		</PropertyGroup>

		<Copy SourceFiles="$(DeploySource)" DestinationFiles="$(DockerSourceFullPath)" Condition="'$(GENERATOR)' == 'Java'" />

		<ItemGroup>
			<Line Include="# Dockerfile generated by GeneXus ($(GENERATOR))"/>
			<Line Include="FROM $(DOCKER_BASE_IMAGE)"/>
			<Line Include="LABEL maintainer=&quot;$(DOCKER_MAINTAINER)&quot;" Condition="'$(DOCKER_MAINTAINER)' != ''" />
			<Line Include="ENV $(DOCKER_ENVVARS.Replace(';',' '))" Condition="'$(DOCKER_ENVVARS)' != ''" />
			<Line Include="WORKDIR $(DOCKER_WEBAPPLOCATION)" />
			<Line Include="RUN [ -d ROOT/ ] &amp;&amp; mv ROOT/ ROOT.old/ || true"  Condition="'$(GENERATOR)' == 'Java'" />
			<Line Include="$(DeployCommand) [&quot;$(DockerSource)&quot;, &quot;$(DOCKER_WEBAPPLOCATION)&quot;]"  />
			<Line Include="ENTRYPOINT [&quot;dotnet&quot;, &quot;bin/GxNetCoreStartup.dll&quot;]"  Condition="'$(GENERATOR)' == '.NET Core'" />
			<Line Include="ADD [&quot;redis/*.jar&quot;, &quot;/usr/local/tomcat/lib/&quot;]" Condition="'$(GENERATOR)' == 'Java' AND '$(K8S_GENERATE_KUBERNETES)' == 'true' AND '$(K8S_ENABLE_REDIS)' == 'true'"/>
			<Line Include="ADD [&quot;redis/*.xml&quot;, &quot;/usr/local/tomcat/conf/&quot;]" Condition="'$(GENERATOR)' == 'Java' AND '$(K8S_GENERATE_KUBERNETES)' == 'true' AND '$(K8S_ENABLE_REDIS)' == 'true'"/>
			<Line Include="ADD [&quot;redis/redis-data-cache.properties&quot;, &quot;/usr/local/tomcat/conf/&quot;]" Condition="'$(GENERATOR)' == 'Java' AND '$(K8S_GENERATE_KUBERNETES)' == 'true' AND '$(K8S_ENABLE_REDIS)' == 'true'"/>
		</ItemGroup>

		<Message Text="Creating Dockerfile" Importance="high"/>

		<WriteLinesToFile File="$(Dockerfile)" Lines="@(Line)" Overwrite="true" />

	</Target>

	<Target Name="ExtractZip" Condition="'$(GENERATOR)' == '.NET Core' OR '$(GENERATOR)' == 'C#'">

		<Message Text="Extracting application" Importance="high"/>

		<RemoveDir Directories="$(TempDir)"/>
		<Unzip ZipFileName="$(DeploySource)" TargetDirectory="$(TempDir)"/>

	</Target>

	<Target Name="Deploy" DependsOnTargets="DeployDocker"/>

	<Target Name="DeployDocker" DependsOnTargets="CreateDockerfile;ExtractZip;RedisSupport">
		
		<Exec Command="docker info --format &quot;{{.OSType}}&quot;" ConsoleToMSBuild="true" ContinueOnError="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="DOCKER_OS" />
			<Output TaskParameter="ExitCode" PropertyName="DOCKER_EXIT_CODE"/>
		</Exec>

		<Error Text="You need to change your Docker Engine to work with Linux containers" Condition="('$(GENERATOR)' == '.NET Core' OR '$(GENERATOR)' == 'Java') AND '$(DOCKER_OS)' == 'windows'"/>
		<Error Text="You need to change your Docker Engine to work with Windows containers" Condition="'$(GENERATOR)' == 'C#' AND '$(DOCKER_OS)' == 'linux'"/>

		<PropertyGroup>
			<UnslashedDeployDirectory>$([System.Text.RegularExpressions.Regex]::Replace ($(DeployDirectory), `\\$`, ""))</UnslashedDeployDirectory>
		</PropertyGroup>
		
		<Error Text="Missing property DOCKER_IMAGE_NAME" Condition="'$(DOCKER_EXIT_CODE)' == '0' AND '$(DOCKER_IMAGE_NAME)' == ''"/>

		<CallTarget Targets="RedisSupport" Condition="'$(K8S_GENERATE_KUBERNETES)' == 'true' AND '$(K8S_ENABLE_REDIS)' == 'true'" />
		
		<Message Text="Building Docker image $(DOCKER_IMAGE_NAME)" Importance="high" Condition="'$(DOCKER_EXIT_CODE)' == '0'"/>

		<Exec Command='docker build --pull --no-cache -t $(DOCKER_IMAGE_NAME) -f "$(Dockerfile)" "$(UnslashedDeployDirectory)"' Condition="'$(DOCKER_EXIT_CODE)' == '0'" />
		<Warning Text="Dockerfile successfully created but no docker image was generated because Docker client was not found." Condition="'$(DOCKER_EXIT_CODE)' == '9009'"/>

	</Target>

	<Target Name="GenerateKubernetes" AfterTargets="Deploy" Condition="'$(K8S_GENERATE_KUBERNETES)' == 'true'">

		<Message Text="Generating Kubernetes metadata file" Importance="high"/>
		
		<ItemGroup>
			<EnvVars Include="$(DOCKER_ENVVARS.Split(';'))"/>
		</ItemGroup>

		<PropertyGroup>
			<HasEnvVars Condition="'@(EnvVars->Count())' > 0">true</HasEnvVars>
			<HasEnvVars Condition="'@(EnvVars->Count())' == 0">false</HasEnvVars>
			<AppYaml>K8s-$(DeploymentUnit)-App.yaml</AppYaml>
			<NamespaceYaml>K8s-$(DeploymentUnit)-Namespace.yaml</NamespaceYaml>
			<RedisYaml>K8s-$(DeploymentUnit)-Redis.yaml</RedisYaml>
			<AppTemplate>k8s-app.stg</AppTemplate>
			<NamespaceTemplate>k8s-namespace.stg</NamespaceTemplate>
			<RedisTemplate>k8s-redis.stg</RedisTemplate>
			<AppName>$(DeploymentUnit.Replace("_","-").ToLower())</AppName>
		</PropertyGroup>

		<PropertyGroup Condition="'$(GENERATOR)' == 'Java'">
			<ContainerPort>8080</ContainerPort>
		</PropertyGroup>
		
		<PropertyGroup Condition="'$(GENERATOR)' == '.NET Core'">
			<ContainerPort>80</ContainerPort>
		</PropertyGroup>

		<ItemGroup Condition="'$(HasEnvVars)' == 'true'">
			<EnvVarsItem Include="@(EnvVars)">
				<Index>$([System.String]::new('%(EnvVars.Identity)').IndexOf('='))</Index>
				<Key>$([System.String]::new('%(EnvVars.Identity)').Substring(0,$([System.String]::new('%(EnvVars.Identity)').IndexOf('='))))</Key>
				<Value>$([System.String]::new('%(EnvVars.Identity)').Substring($([MSBuild]::Add($([System.String]::new('%(EnvVars.Identity)').IndexOf('=')),1))))</Value>
			</EnvVarsItem>
		</ItemGroup>

		<PropertyGroup>
			<K8S_NAMESPACE Condition="'$(K8S_NAMESPACE)' == ''">default</K8S_NAMESPACE>
			<HasCustomNamespace Condition="'$(K8S_NAMESPACE)' != 'default'">true</HasCustomNamespace>
			<HasCustomNamespace Condition="'$(K8S_NAMESPACE)' == 'default'">false</HasCustomNamespace>
			<HasChangeCause Condition="'$(K8S_CHANGE_CAUSE)' != ''">true</HasChangeCause>
			<HasChangeCause Condition="'$(K8S_CHANGE_CAUSE)' == ''">false</HasChangeCause>
		</PropertyGroup>

		<GenerateFromTemplate Condition="'$(K8S_ENABLE_REDIS)' == 'true'" TemplateGroupFile="$(TemplatePath)\$(RedisTemplate)" TemplateName="generate" Properties="AppName=$(AppName);HasCustomNamespace=$(HasCustomNamespace);CustomNamespace=$(K8S_NAMESPACE)"
								Items="@(EnvVarsItem)" ItemTypes="@(EnvVarsItem -> 'EnvVarsItems[]')"  OutputFile="$(DeployDirectory)\$(RedisYaml)"/>

		<Message Condition="'$(K8S_ENABLE_REDIS)' == 'true'"  Text="Metadata Redis file succesfully generated at '$(DeployDirectory)\$(RedisYaml)'" Importance="high"/>

		<GenerateFromTemplate Condition="'$(HasCustomNamespace)' == 'true'" TemplateGroupFile="$(TemplatePath)\$(NamespaceTemplate)" TemplateName="generate" Properties="HasCustomNamespace=$(HasCustomNamespace);CustomNamespace=$(K8S_NAMESPACE)"
								Items="@(EnvVarsItem)" ItemTypes="@(EnvVarsItem -> 'EnvVarsItems[]')"  OutputFile="$(DeployDirectory)\$(NamespaceYaml)"/>

		<Message Condition="'$(HasCustomNamespace)' == 'true'" Text="Metadata Namespace file succesfully generated at '$(DeployDirectory)\$(NamespaceYaml)'" Importance="high"/>

		<GenerateFromTemplate TemplateGroupFile="$(TemplatePath)\$(AppTemplate)" TemplateName="generate" Properties="serviceType=$(K8S_SERVICE_TYPE);containerPort=$(ContainerPort);replicas=$(K8S_INITIAL_REPLICAS);imageTag=$(DOCKER_IMAGE_NAME);HasEnvVars=$(HasEnvVars);EnableRedis=$(K8S_ENABLE_REDIS);AppName=$(AppName);Generator=$(GENERATOR);HasCustomNamespace=$(HasCustomNamespace);CustomNamespace=$(K8S_NAMESPACE);HasChangeCause=$(HasChangeCause);ChangeCause=$(K8S_CHANGE_CAUSE)"
								Items="@(EnvVarsItem)" ItemTypes="@(EnvVarsItem -> 'EnvVarsItems[]')"  OutputFile="$(DeployDirectory)\$(AppYaml)"/>

		<Message Text="Kubernetes metadata file succesfully generated at '$(DeployDirectory)\$(AppYaml)'" Importance="high"/>
		<Message Text="Make sure you push the $(DOCKER_IMAGE_NAME) Docker image to a reachable Docker registry (eg. 'docker push $(DOCKER_IMAGE_NAME)')" Importance="high"/>

	</Target>

	<Target Name="RedisSupport" Condition="'$(K8S_GENERATE_KUBERNETES)' == 'true' AND '$(K8S_ENABLE_REDIS)' == 'true'">

		<Message Text="Enabling Redis support" Importance="high"/>

		<ItemGroup>
			<RedisConfig Include="$(GX_PROGRAM_DIR)\DeploymentTargets\Docker\redis\$(GENERATOR)\*.*"/>
		</ItemGroup>

		<Copy SourceFiles="@(RedisConfig)" DestinationFolder="$(DeployDirectory)\redis\" Condition="'$(K8S_ENABLE_REDIS)' == 'true'"/>

		<ItemGroup>
			<CSRedis Include="$(DeployDirectory)\redis\CloudServices.redis.config"/>
		</ItemGroup>

		<XmlPeek XmlInputPath="@(CSRedis)" Query="Services/Service" Condition="Exists('@(CSRedis)')">
			<Output TaskParameter="Result" ItemName="RedisService" />
		</XmlPeek>

		<ItemGroup>
			<DestinationCS Include="$(TempDir)\CloudServices.config"/>
		</ItemGroup>
		
		<PropertyGroup>
			<CloudServiceExists Condition="Exists('@(DestinationCS)')">true</CloudServiceExists>
			<CloudServiceExists Condition="!Exists('@(DestinationCS)')">false</CloudServiceExists>
		</PropertyGroup>

		<XmlPeek XmlInputPath="@(DestinationCS)" Query="Services/Service" Condition="'$(CloudServiceExists)' == 'true'">
			<Output TaskParameter="Result" ItemName="OriginalServices" />
		</XmlPeek>

	</Target>

	<Target Name="AppendRedisCS" AfterTargets="RedisSupport" Condition="'@(RedisService->Count())' > 0">

		<Message Text="Setting up new CloudServices.config" Importance="high"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" Overwrite="true" Encoding="UTF-8"/>

		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;Services xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;" Overwrite="false"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="@(OriginalServices)" Overwrite="false"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="@(RedisService)" Overwrite="false"/>

		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;/Services&gt;" Overwrite="false"/>

	</Target>
	
</Project>
