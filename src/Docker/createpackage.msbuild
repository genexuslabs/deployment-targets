<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="CreatePackage"  ToolsVersion="4.0">
	<PropertyGroup>
		<GXDeployFileProject>$([System.IO.Path]::GetFullPath('$(DeployFullPath)/../../../../web/$(ProjectName).gxdproj'))</GXDeployFileProject>
		<MainPrefix>a</MainPrefix>
		<DOCKER_WEBAPPLOCATION Condition="'$(DOCKER_APPLOCATION)'!= ''">$(DOCKER_APPLOCATION)</DOCKER_WEBAPPLOCATION>
	</PropertyGroup>
	<Import Project="$(GX_PROGRAM_DIR)\GeneXus.Docker.targets"/>
	<Import Project="$(WebSourcePath)\$(DeploymentUnit).props" Condition="Exists('$(WebSourcePath)\$(DeploymentUnit).props')"/>
	<Import Project="$(GXDeployFileProject)" Condition ="Exists('$(GXDeployFileProject)')" />
	<Import Project="$(GX_PROGRAM_DIR)\Imports.targets" Condition ="!Exists('$(GXDeployFileProject)')"/>

	<PropertyGroup>
		<SpringBootDeploy Condition="'$(GENERATOR)' == 'Java' AND '$(JavaFrameWork)' =='JAVA_FRAMEWORK_SPRINGBOOT' AND '$(IsCMD)' != 'true'">true</SpringBootDeploy>
	</PropertyGroup>

	<PropertyGroup>
		<IsWindows Condition="'$(OS)' == 'Windows_NT'">true</IsWindows>
		<IsWindows Condition="'$(IsWindows)' == ''">false</IsWindows> 

		<GradleCommand Condition="'$(IsWindows)' == 'true'">gradlew</GradleCommand>
		<GradleCommand Condition="'$(IsWindows)' != 'true'">./gradlew</GradleCommand>
	</PropertyGroup>

	<Target Name="GetDockerfileDefaults" Condition="'$(DOCKER_WEBAPPLOCATION)' == '' OR '$(DOCKER_BASE_IMAGE)' == ''">
		<GetDockerConfigDefaults 
			BuildEnvironment = "$(BuildEnvironment)"
			Generator = "$(GENERATOR)" 
			IsCMD = "$(IsCMD)" 
			SpringBootApp = "$(SpringBootDeploy)">
			<Output TaskParameter="WebAppLocation"
					PropertyName="DOCKER_WEBAPPLOCATION" />
			<Output TaskParameter="BaseImage"
					PropertyName="DOCKER_BASE_IMAGE" />
		</GetDockerConfigDefaults>
		<Message Text="Setting defaults to: DOCKER_BASE_IMAGE : $(DOCKER_BASE_IMAGE). DOCKER_WEBAPPLOCATION: $(DOCKER_WEBAPPLOCATION)" Importance="high"/>
	</Target>

	<Target Name="CreateDockerfile" DependsOnTargets="GetDockerfileDefaults;DownloadRedissonDeps" Condition="'$(SpringBootDeploy)' != 'true'">		
		
		<ItemGroup>
			<DeploySourceItem Include="$(DeploySource)" />
		</ItemGroup>

		<PropertyGroup>
		  <ActualDeployDirectory>@(DeploySourceItem->'%(RootDir)%(Directory)')</ActualDeployDirectory>
		  <DeployFileName>@(DeploySourceItem->'%(Filename)')</DeployFileName>
		  <DeployFileExtension>@(DeploySourceItem->'%(Extension)')</DeployFileExtension>
		  <DeployDirectory>$(ActualDeployDirectory)context</DeployDirectory>
		</PropertyGroup>

		<Error Text="Property 'Image App location' cannot be empty" Condition="'$(DOCKER_WEBAPPLOCATION)' == ''"/>
		<Error Text="DeploySource must be a .war or .jar file" Condition="'$(GENERATOR)' == 'Java' AND '$(DeployFileExtension)' != '.war' AND '$(DeployFileExtension)' != '.jar'" />
		<Error Text="DeploySource must be a .zip file" Condition="('$(GENERATOR)' == 'C#' OR '$(GENERATOR)' == '.NET Framework' OR '$(GENERATOR)' == '.NET Core' or '$(GENERATOR)' == '.NET') AND '$(DeployFileExtension)' != '.zip'"/>
        <Error Text="Missing or invalid GXDeployFileProject property." Condition="'$(GENERATOR)' == 'Java' AND '$(DeployFileExtension)' == '.jar' AND !Exists('$(GXDeployFileProject)')" />

		<PropertyGroup>
			<Dockerfile>$(DeployDirectory)/Dockerfile</Dockerfile>
			<OpenTelemetrySupport Condition="'$(ObservabilityProvider)' != ''">true</OpenTelemetrySupport>
		</PropertyGroup>
		
		<MakeDir Directories="$(DeployDirectory)" Condition="!Exists('$(DeployDirectory)')"/>	

		<!-- Java -->
		<PropertyGroup Condition="'$(GENERATOR)' == 'Java' AND '$(IsCMD)' != 'true'">
			<WarName Condition=" '$(WarName)' == ''">ROOT</WarName>
			<Extension>.war</Extension>
			<DockerSource>$(WarName)$(Extension)</DockerSource>
			<DockerSourceFullPath>$(DeployDirectory)\$(DockerSource)</DockerSourceFullPath>
			<DeployCommand>ADD</DeployCommand>
		</PropertyGroup>

		<PropertyGroup Condition="'$(GENERATOR)' == 'Java' AND '$(IsCMD)' == 'true'">
			<JarName Condition=" '$(JarName)' == ''">$(DeployFileName)</JarName>
			<Extension>.jar</Extension>
			<DockerSource>$(JarName)$(Extension)</DockerSource>
			<DockerSourceFullPath>$(DeployDirectory)/$(DockerSource)</DockerSourceFullPath>
			<DeployCommand>ADD</DeployCommand>
		</PropertyGroup>

		<PropertyGroup Condition="'$(GENERATOR)' == 'Java'">
			<OpenTelemetryAgentFile>opentelemetry-javaagent.jar</OpenTelemetryAgentFile>
			<OpenTelemetryAgentPath>lib/$(OpenTelemetryAgentFile)</OpenTelemetryAgentPath>
		</PropertyGroup>

		<!-- C# or .NET Core -->
		<PropertyGroup Condition="'$(GENERATOR)' == 'C#' OR '$(GENERATOR)' == '.NET Core' OR '$(GENERATOR)' == '.NET Framework' OR '$(GENERATOR)' == '.NET'">
			<DeployCommand>COPY</DeployCommand>
			<TempDir>$(DeployDirectory)/temp</TempDir>
			<DockerSource>temp/</DockerSource>
		</PropertyGroup>

		<ItemGroup Condition="'$(IsCMD)' == 'true'">
			<SelectedObjetsIgnoreFiles Include ="@(SelectedObject)" Condition="'%(SelectedObject.Type)' != 'File'">
				<Type>%(SelectedObject.Type)</Type>
			</SelectedObjetsIgnoreFiles>	
		</ItemGroup>
		
		<PropertyGroup Condition="'$(IsCMD)' == 'true' AND '@(SelectedObjetsIgnoreFiles->Count())' == 1 AND @(SelectedObjetsIgnoreFiles->'%(Type)') == 'Procedure'">
			<RunnableMain>true</RunnableMain>
		</PropertyGroup>

		<ItemGroup Condition="('$(GENERATOR)' == 'C#' OR '$(GENERATOR)' == '.NET Core' OR '$(GENERATOR)' == '.NET Framework' OR '$(GENERATOR)' == '.NET') AND '$(RunnableMain)' == 'true'">
			<ObjectSelected Include="@(SelectedObject->'%(Module).$(MainPrefix)%(Identity)')" Condition="%(SelectedObject.Module) != ''"/>
			<ObjectSelected Include="@(SelectedObject->'$(MainPrefix)%(Identity)')" Condition="%(SelectedObject.Module) == ''" />
			<ObjectSelectedLower Include="@(ObjectSelected->ToLower())" />
		</ItemGroup>

		<PropertyGroup Condition="('$(GENERATOR)' == 'C#' OR '$(GENERATOR)' == '.NET Core' OR '$(GENERATOR)' == '.NET Framework' OR '$(GENERATOR)' == '.NET') AND '$(RunnableMain)' == 'true'">
			<MainSelected>%(ObjectSelectedLower.Identity)</MainSelected>
		</PropertyGroup>

		<Copy SourceFiles="$(DeploySource)" DestinationFiles="$(DockerSourceFullPath)" Condition="'$(GENERATOR)' == 'Java' AND '$(SpringBootDeploy)' != 'true'" />
		
		<!-- Copy Java drivers -->
		<ItemGroup>
			<DependencyFiles Include="$(DeployFullPath)/*" />
        	<JarDependencies
            	Include="@(DependencyFiles)"
            	Condition="'%(Extension)' == '.jar'"
            />
    	</ItemGroup>

		<Copy SourceFiles="@(JarDependencies)" DestinationFiles="@(JarDependencies -> '$(DeployDirectory)/drivers/%(Filename)%(Extension)')" />
		<Copy SourceFiles="$(DeployFullPath)/GXtestExecutionData_Deploy.json" DestinationFolder="$(DeployDirectory)/drivers" Condition="Exists('$(DeployFullPath)/GXtestExecutionData_Deploy.json')" />

		<ItemGroup>
			<Line Include="# Dockerfile generated by GeneXus ($(GENERATOR))"/>
			<Line Include="FROM $(DOCKER_BASE_IMAGE)"/>
			<Line Include="LABEL maintainer=&quot;$(DOCKER_MAINTAINER)&quot;" Condition="'$(DOCKER_MAINTAINER)' != ''" />
			<Line Include="RUN apt-get update &amp;&amp; apt-get install -y libgdiplus" Condition="('$(GENERATOR)' == '.NET Core' or '$(GENERATOR)' == '.NET') AND '$(OfficeSupport)' == 'true'" />
			<Line Include="ENV $(DOCKER_ENVVARS.Replace(';',' '))" Condition="'$(DOCKER_ENVVARS)' != ''" />
			<Line Include="WORKDIR $(DOCKER_WEBAPPLOCATION)" />
			<Line Include="ENV ASPNETCORE_URLS=&quot;http://*:8080&quot;" Condition ="('$(GENERATOR)' == '.NET Core' or '$(GENERATOR)' == '.NET') AND ('$(K8S_GENERATE_KUBERNETES)' == 'true')"/>
			<Line Include="COPY tomcat/bin/setenv.sh /usr/local/tomcat/bin" Condition="'$(GENERATOR)' == 'Java'" />
			<Line Include="# OpenTelemetry Support ($(ObservabilityProvider))" Condition="'$(GENERATOR)' == 'Java' AND '$(OpenTelemetrySupport)' == 'true'" />
			<Line Include="COPY tomcat/bin/otelenv.sh /usr/local/tomcat/bin" Condition="'$(GENERATOR)' == 'Java' AND '$(OpenTelemetrySupport)' == 'true'" />
			<Line Include="COPY lib /usr/local/tomcat/lib" Condition="'$(GENERATOR)' == 'Java' AND '$(OpenTelemetrySupport)' == 'true'" />			
			<Line Include="RUN chgrp -R 0 $(DOCKER_WEBAPPLOCATION) &amp;&amp; chmod -R g=u $(DOCKER_WEBAPPLOCATION)" Condition="'$(DOCKER_CONTAINER_RUNTIME)' == 'Openshift' AND '$(DOCKER_IMAGE_REGISTRY)' == 'DockerHub'" />
			<Line Include="RUN [ -d ROOT/ ] &amp;&amp; mv ROOT/ ROOT.old/ || true"  Condition="'$(GENERATOR)' == 'Java'" />
			<Line Include="$(DeployCommand) [&quot;$(DockerSource)&quot;, &quot;$(DOCKER_WEBAPPLOCATION)&quot;]"  />
			<Line Include="ENTRYPOINT [&quot;dotnet&quot;, &quot;bin/GxNetCoreStartup.dll&quot;]" Condition="'$(GENERATOR)' == '.NET Core' or '$(GENERATOR)' == '.NET'" />
			<Line Include="ADD [&quot;tomcat/lib/*.jar&quot;, &quot;/usr/local/tomcat/lib/&quot;]" Condition="'$(GENERATOR)' == 'Java' AND '$(K8S_GENERATE_KUBERNETES)' == 'true' AND '$(K8S_ENABLE_REDIS)' == 'true' AND '$(SpringBootDeploy)' != 'true'"/>
			<Line Include="ADD [&quot;redis/*.xml&quot;, &quot;/usr/local/tomcat/conf/&quot;]" Condition="'$(GENERATOR)' == 'Java' AND '$(K8S_GENERATE_KUBERNETES)' == 'true' AND '$(K8S_ENABLE_REDIS)' == 'true'"/>
			<Line Include="ADD [&quot;redis/redisson.yaml&quot;, &quot;/usr/local/tomcat&quot;]" Condition="'$(GENERATOR)' == 'Java' AND '$(K8S_GENERATE_KUBERNETES)' == 'true' AND '$(K8S_ENABLE_REDIS)' == 'true'"/>
		</ItemGroup>

		<ItemGroup>
			<LineCMD Include="# Dockerfile generated by GeneXus ($(GENERATOR))"/>
			<LineCMD Include="FROM $(DOCKER_BASE_IMAGE)"/>
			<LineCMD Include="LABEL maintainer=&quot;$(DOCKER_MAINTAINER)&quot;" Condition="'$(DOCKER_MAINTAINER)' != ''" />
			<LineCMD Include="RUN apt-get update &amp;&amp; apt-get install -y libgdiplus" Condition="('$(GENERATOR)' == '.NET Core' or '$(GENERATOR)' == '.NET') AND '$(OfficeSupport)' == 'true'" />
			<LineCMD Include="ENV $(DOCKER_ENVVARS.Replace(';',' '))" Condition="'$(DOCKER_ENVVARS)' != ''" />
			<LineCMD Include="WORKDIR $(DOCKER_WEBAPPLOCATION)" />
			<LineCMD Include="RUN chgrp -R 0 $(DOCKER_WEBAPPLOCATION) &amp;&amp; chmod -R g=u $(DOCKER_WEBAPPLOCATION)" Condition="'$(DOCKER_CONTAINER_RUNTIME)' == 'Openshift' AND '$(DOCKER_IMAGE_REGISTRY)' == 'DockerHub'" />
			<LineCMD Include="RUN [ -d ROOT/ ] &amp;&amp; mv ROOT/ ROOT.old/ || true"  Condition="'$(GENERATOR)' == 'Java'" />
			<LineCMD Include="$(DeployCommand) [&quot;$(DockerSource)&quot;, &quot;$(DOCKER_WEBAPPLOCATION)&quot;]"  />
			<LineCMD Include="ENTRYPOINT [&quot;dotnet&quot;, &quot;bin/$(MainSelected).dll&quot;]" Condition="('$(GENERATOR)' == '.NET Core' or '$(GENERATOR)' == '.NET') AND $(MainSelected) !=''" />
			<LineCMD Include="ENTRYPOINT [&quot;bin/$(MainSelected).exe&quot;]" Condition="('$(GENERATOR)' == 'C#' or '$(GENERATOR)' == '.NET Framework') AND $(MainSelected) !=''" />
			<LineCMD Include="ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;$(DockerSource)&quot;]" Condition="'$(GENERATOR)' == 'Java' AND '$(RunnableMain)' == 'true'" />
			<LineCMD Include="COPY [&quot;drivers/&quot;, &quot;$(DOCKER_WEBAPPLOCATION)&quot;]" Condition="'$(GENERATOR)' == 'Java'" />
		</ItemGroup>

		<Message Text="Creating Dockerfile" Importance="high"/>
		
		<WriteLinesToFile File="$(Dockerfile)" Lines="@(Line)" Overwrite="true" Condition="'$(IsCMD)' != 'true' AND '$(JavaFrameWork)'!='JAVA_FRAMEWORK_SPRINGBOOT'" />
		<WriteLinesToFile File="$(Dockerfile)" Lines="@(LineCMD)" Overwrite="true" Condition="'$(IsCMD)' == 'true'" />
		

	</Target>
	<Target Name ="CreateSpringBootDockerfile" DependsOnTargets="GetDockerfileDefaults;BuildSpringBootApp" Condition="'$(SpringBootDeploy)' == 'true'">
		<Message Text="Creating Dockerfile" Importance="high"/>
		<PropertyGroup>
			<JarName Condition=" '$(JarName)' == ''">$(SpringBootSourceFileName)</JarName>
			<Extension>.jar</Extension>
			<DockerSource>$(JarName)</DockerSource>
			<DeployCommand>COPY</DeployCommand>
		</PropertyGroup>
		<ItemGroup>
			<LineSpringBoot Include="# Dockerfile generated by GeneXus (Java Spring Boot Application)"/>
			<LineSpringBoot Include="FROM $(DOCKER_BASE_IMAGE)"/>
			<LineSpringBoot Include="LABEL maintainer=&quot;$(DOCKER_MAINTAINER)&quot;" Condition="'$(DOCKER_MAINTAINER)' != ''" />
			<LineSpringBoot Include="ENV $(DOCKER_ENVVARS.Replace(';',' '))" Condition="'$(DOCKER_ENVVARS)' != ''" />
			<LineSpringBoot Include="RUN [ -d ROOT/ ] &amp;&amp; mv ROOT/ ROOT.old/ || true" />
			<LineSpringBoot Include="WORKDIR $(DOCKER_WEBAPPLOCATION)" />
			<LineSpringBoot Include="$(DeployCommand) [&quot;$(DockerSource)&quot;, &quot;app.jar&quot;]"  />
			<LineSpringBoot Include="ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot; , &quot;$(DOCKER_WEBAPPLOCATION)/app.jar&quot;]" />
		</ItemGroup>

		<WriteLinesToFile File="$(SpringBootDockerfile)" Lines="@(LineSpringBoot)" Overwrite="true" Condition="'$(SpringBootDeploy)' == 'true'" />
	</Target>
	<Target Name="BuildSpringBootApp" DependsOnTargets="DownloadRedissonDeps;RedisSupport;SpringRedissonSupport" Condition="'$(SpringBootDeploy)' == 'true'">

		<PropertyGroup>
			<SpringBootSourcePath>$([System.IO.Path]::GetFullPath('$(DeploySource)/../'))</SpringBootSourcePath>
			<SpringBootDeployPath>$(SpringBootSourcePath)context</SpringBootDeployPath>
			<SpringBootDockerfile>$(SpringBootDeployPath)/Dockerfile</SpringBootDockerfile>
			<DeployDirectory>$(SpringBootDeployPath)</DeployDirectory>
		</PropertyGroup>

		<MakeDir Directories="$(SpringBootDeployPath)" Condition="!Exists('$(SpringBootDeployPath)')"/>

		<!-- Supress final "/bin" from JavaPath to get JAVA_HOME property -->
        <PropertyGroup Condition="'$(JavaPath)' != ''">
	        <JAVA_HOME>$([System.String]::Copy('$(JavaPath)').Replace('\bin', ''))</JAVA_HOME>
		<JAVA_HOME>$([System.String]::Copy('$(JavaPath)').Replace('/bin', ''))</JAVA_HOME>
        </PropertyGroup>

		<!-- Build Spring Boot Application before packaging -->
		<Message Text="$(GradleCommand) build --no-daemon -Pdeploy -Dorg.gradle.java.home=&quot;$(JAVA_HOME)&quot; -Dorg.gradle.jvmargs=-Xmx1024m" Importance="high" />
        <Exec Command="$(GradleCommand) build --no-daemon -Pdeploy -Dorg.gradle.java.home=&quot;$(JAVA_HOME)&quot; -Dorg.gradle.jvmargs=-Xmx1024m" WorkingDirectory="$(DeploySource)"
            ConsoleToMSBuild="true" >
	        <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
	        <Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
        </Exec>

		<Message Text="$(OutputOfExec)" Condition="'$(ErrorCode)' != '0'" Importance="high" />
		<Message Text="Spring Boot Application was successfully built." Condition="'$(ErrorCode)' == '0'" Importance="high"/>

		
		<!-- Find the JAR file in the build output directory -->
			
		<CreateItem Include="$(DeploySource)/build/libs/*.jar" Condition="'$(ErrorCode)' == '0'">
			<Output TaskParameter="Include" ItemName="JarFiles" />
		</CreateItem>
		
		 <ItemGroup>
			<SpringBootSourceFile Include="@(JarFiles)" />
		</ItemGroup>
		
		<PropertyGroup>
			<SpringBootSourceFileName>@(SpringBootSourceFile->'%(Filename)%(Extension)')</SpringBootSourceFileName>
		</PropertyGroup>		
		
		<Move SourceFiles="%(JarFiles.Identity)" DestinationFolder="$(SpringBootDeployPath)"/>
		
	</Target>

	<Target Name="ExtractZip" Condition="'$(GENERATOR)' == '.NET Core' OR '$(GENERATOR)' == 'C#' or '$(GENERATOR)' == '.NET Framework' or '$(GENERATOR)' == '.NET'">

		<Message Text="Extracting application" Importance="high"/>

		<RemoveDir Directories="$(TempDir)"/>
		
		<Unzip ZipFileName="$(DeploySource)" TargetDirectory="$(TempDir)"/>

	</Target>

    <Target Name="RedisSupport" Condition="'$(K8S_GENERATE_KUBERNETES)' == 'true' AND '$(K8S_ENABLE_REDIS)' == 'true'">

		<Message Text="Enabling Redis support" Importance="high"/>
		<PropertyGroup>
			<JavaRedisRoot>$(GX_PROGRAM_DIR)/DeploymentTargets/Docker/redis/Java</JavaRedisRoot>
		</PropertyGroup>
		<ItemGroup>
			<RedisConfig Include="$(JavaRedisRoot)/context.xml" Condition="$(GENERATOR)=='Java'"/>
			<RedisConfig Include="$(JavaRedisRoot)/web.xml" Condition="$(GENERATOR)=='Java'"/>
			<RedisConfig Include="$(JavaRedisRoot)/redisson.yaml" Condition="$(GENERATOR)=='Java'"/>
			<RedisConfig Include="$(GX_PROGRAM_DIR)/DeploymentTargets/Docker/redis/$(GENERATOR)/*.*" Condition="'$(GENERATOR)' != 'Java'"/>
		</ItemGroup>

		<Copy SourceFiles="@(RedisConfig)" DestinationFolder="$(DeployDirectory)/redis/" Condition="'$(K8S_ENABLE_REDIS)' == 'true' AND '$(SpringBootDeploy)' != 'true'" />

		<Copy SourceFiles="$(JavaRedisRoot)/redisson.yaml" DestinationFolder="$(DeployFullPath)/src/main/resources" Condition="'$(K8S_ENABLE_REDIS)' == 'true' AND '$(SpringBootDeploy)' == 'true'" />

		<ItemGroup>
			<CSRedis Include="$(DeployDirectory)/redis/CloudServices.redis.config"/>
		</ItemGroup>

		<XmlPeek XmlInputPath="@(CSRedis)" Query="Services/Service" Condition="Exists('@(CSRedis)')">
			<Output TaskParameter="Result" ItemName="RedisService" />
		</XmlPeek>

		<ItemGroup>
			<DestinationCS Include="$(TempDir)/CloudServices.config"/>
		</ItemGroup>
		
		<PropertyGroup>
			<CloudServiceExists Condition="Exists('@(DestinationCS)')">true</CloudServiceExists>
			<CloudServiceExists Condition="!Exists('@(DestinationCS)')">false</CloudServiceExists>
		</PropertyGroup>

		<XmlPeek XmlInputPath="@(DestinationCS)" Query="Services/Service" Condition="'$(CloudServiceExists)' == 'true'">
			<Output TaskParameter="Result" ItemName="OriginalServices" />
		</XmlPeek>

	</Target>

	<Target Name="AppendRedisCS" AfterTargets="RedisSupport" Condition="'@(RedisService->Count())' > 0">

		<Message Text="Setting up new CloudServices.config" Importance="high"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" Overwrite="true" Encoding="UTF-8"/>

		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;Services xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;" Overwrite="false"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="@(OriginalServices)" Overwrite="false"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="@(RedisService)" Overwrite="false"/>

		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;/Services&gt;" Overwrite="false"/>

	</Target>

	<Target Name="DownloadRedissonDeps" Condition="'$(GENERATOR)' == 'Java' AND '$(K8S_GENERATE_KUBERNETES)' == 'true' AND '$(K8S_ENABLE_REDIS)' == 'true'" >
	 	
		<ItemGroup Condition="'$(SpringBootDeploy)' != 'true'">
			<DeploySourceDirectory Include="$(DeploySource)" />
		</ItemGroup>

		<PropertyGroup Condition="'$(SpringBootDeploy)' != 'true'">
			<ContextDeployDirectory>%(DeploySourceDirectory.RootDir)%(DeploySourceDirectory.Directory)context</ContextDeployDirectory>
		</PropertyGroup>

		<PropertyGroup>
			<RedissonLibs Condition="'$(SpringBootDeploy)' != 'true'">$(ContextDeployDirectory)/tomcat/lib</RedissonLibs>
			<RedissonLibs Condition="'$(SpringBootDeploy)' == 'true'">$([System.IO.Path]::GetFullPath('$(DeployFullPath)/lib'))</RedissonLibs>
		</PropertyGroup>
		<Exec Command="$(GradleCommand) --no-daemon -PSpringBootDeploy=$(SpringBootDeploy) -PTomcatVersion=$(TomcatVersion) -PRedissonLibsDirectory=$(RedissonLibs) CopyDependencies" WorkingDirectory="$(GX_PROGRAM_DIR)\DeploymentTargets\Docker\redis\Java" 
		ConsoleToMSBuild="true"
		ConsoleOutput="output" />

		<Message Text = "$(output)" />
	</Target>

	<Target Name="ClearRedisAuxiliaryFolder" AfterTargets="AppendRedisCS" Condition="'$(GENERATOR)' != 'Java'">
		<RemoveDir Directories="$(DeployDirectory)/redis/"/>
	</Target>

	<Target Name="GenerateKubernetes" DependsOnTargets="RedisSupport" Condition="'$(K8S_GENERATE_KUBERNETES)' == 'true'">
		<Message Text="Generating Kubernetes metadata file" Importance="high"/>
		
		<PropertyGroup>
			<TemplatePath>$(GX_PROGRAM_DIR)/DeploymentTargets/Docker/Templates</TemplatePath>			
		</PropertyGroup>

		<ItemGroup>
			<EnvVars Include="$(DOCKER_ENVVARS.Split(';'))"/>
			<Labels Include="$(K8S_LABELS.Split(';'))"/>
		</ItemGroup>

		<PropertyGroup>
			<HasEnvVars Condition="'@(EnvVars->Count())' > 0">true</HasEnvVars>
			<HasEnvVars Condition="'@(EnvVars->Count())' == 0">false</HasEnvVars>
			<HasLabels Condition="'@(Labels->Count())' > 0">true</HasLabels>
			<HasLabels Condition="'@(Labels->Count())' == 0">false</HasLabels>
			<AppYaml>K8s-$(DeploymentUnit)-App.yaml</AppYaml>
			<NamespaceYaml>K8s-$(K8S_NAMESPACE)-Namespace.yaml</NamespaceYaml>
			<RedisYaml>K8s-$(K8S_NAMESPACE)-Redis.yaml</RedisYaml>
			<AppTemplate>k8s-app.stg</AppTemplate>
			<NamespaceTemplate>k8s-namespace.stg</NamespaceTemplate>
			<RedisTemplate>k8s-redis.stg</RedisTemplate>
			<AppName>$(DeploymentUnit.Replace("_","-").ToLower())</AppName>
		</PropertyGroup>

		<PropertyGroup>
			<ContainerPort>8080</ContainerPort>
		</PropertyGroup>

		<Error Text="Environment Variables must be added in the form of key=value." Condition="$(HasEnvVars) AND $([System.String]::new('%(EnvVars.Identity)').IndexOf('=')) == -1" />

		<ItemGroup Condition="'$(HasEnvVars)' == 'true'">
			<EnvVarsItem Include="@(EnvVars)">
				<Index>$([System.String]::new('%(EnvVars.Identity)').IndexOf('='))</Index>
				<Key>$([System.String]::new('%(EnvVars.Identity)').Substring(0,$([System.String]::new('%(EnvVars.Identity)').IndexOf('='))))</Key>
				<Value>$([System.String]::new('%(EnvVars.Identity)').Substring($([MSBuild]::Add($([System.String]::new('%(EnvVars.Identity)').IndexOf('=')),1))))</Value>
			</EnvVarsItem>
		</ItemGroup>

		<Error Text="Labels must be added in the form of key=value." Condition="$(HasLabels) AND $([System.String]::new('%(Labels.Identity)').IndexOf('=')) == -1" />

		<ItemGroup Condition="'$(HasLabels)' == 'true'">
			<LabelItem Include="@(Labels)">
				<Index>$([System.String]::new('%(Labels.Identity)').IndexOf('='))</Index>
				<Key>$([System.String]::new('%(Labels.Identity)').Substring(0,$([System.String]::new('%(Labels.Identity)').IndexOf('='))))</Key>
				<Value>$([System.String]::new('%(Labels.Identity)').Substring($([MSBuild]::Add($([System.String]::new('%(Labels.Identity)').IndexOf('=')),1))))</Value>
			</LabelItem>
		</ItemGroup>

		<PropertyGroup>
			<K8S_NAMESPACE Condition="'$(K8S_NAMESPACE)' == ''">default</K8S_NAMESPACE>
			<HasCustomNamespace Condition="'$(K8S_NAMESPACE)' != 'default'">true</HasCustomNamespace>
			<HasCustomNamespace Condition="'$(K8S_NAMESPACE)' == 'default'">false</HasCustomNamespace>
			<HasChangeCause Condition="'$(K8S_CHANGE_CAUSE)' != ''">true</HasChangeCause>
			<HasChangeCause Condition="'$(K8S_CHANGE_CAUSE)' == ''">false</HasChangeCause>
		</PropertyGroup>

		<GenerateFromTemplate Condition="'$(K8S_ENABLE_REDIS)' == 'true'" TemplateGroupFile="$(TemplatePath)\$(RedisTemplate)" TemplateName="generate" Properties="AppName=$(AppName);HasCustomNamespace=$(HasCustomNamespace);CustomNamespace=$(K8S_NAMESPACE)" OutputFile="$(DeployDirectory)\$(RedisYaml)"/>

		<Message Condition="'$(K8S_ENABLE_REDIS)' == 'true'"  Text="Metadata Redis file succesfully generated at '$(DeployDirectory)\$(RedisYaml)'" Importance="high"/>

		<GenerateFromTemplate Condition="'$(HasCustomNamespace)' == 'true'" TemplateGroupFile="$(TemplatePath)\$(NamespaceTemplate)" TemplateName="generate" Properties="HasCustomNamespace=$(HasCustomNamespace);CustomNamespace=$(K8S_NAMESPACE)" OutputFile="$(DeployDirectory)\$(NamespaceYaml)"/>

		<Message Condition="'$(HasCustomNamespace)' == 'true'" Text="Metadata Namespace file succesfully generated at '$(DeployDirectory)\$(NamespaceYaml)'" Importance="high"/>

		<GenerateFromTemplate TemplateGroupFile="$(TemplatePath)\$(AppTemplate)" TemplateName="generate" Properties="DeploymentUnit=$(DeploymentUnit);serviceType=$(K8S_SERVICE_TYPE);containerPort=$(ContainerPort);replicas=$(K8S_INITIAL_REPLICAS);imageTag=$(DOCKER_IMAGE_NAME);HasEnvVars=$(HasEnvVars);EnableRedis=$(K8S_ENABLE_REDIS);AppName=$(AppName);Generator=$(GENERATOR);HasCustomNamespace=$(HasCustomNamespace);CustomNamespace=$(K8S_NAMESPACE);HasChangeCause=$(HasChangeCause);ChangeCause=$(K8S_CHANGE_CAUSE);HasLabels=$(HasLabels)"
								Items="@(EnvVarsItem);@(LabelItem)" ItemTypes="@(EnvVarsItem -> 'EnvVarsItems[]');@(LabelItem -> 'LabelItems[]')"  OutputFile="$(DeployDirectory)\$(AppYaml)"/>

		<Message Text="Kubernetes metadata file succesfully generated at '$(DeployDirectory)\$(AppYaml)'" Importance="high"/>

	</Target>

    <Target Name="CreatePackage" DependsOnTargets="ValidatePackaging;CreateDockerfile;CreateSpringBootDockerfile;CopySupportFiles;OpenTelemetrySupportJava;ExtractZip;GenerateKubernetes" />

	<ItemGroup>
    	<ObjectSelectedProcs Include="@(SelectedObject->HasMetadata('Type')->WithMetadataValue('Type','Procedure'))" />
   	</ItemGroup>

    <Target Name="ValidatePackaging">

		<Error Text="DeploySource cannot be empty" Condition="'$(DeploySource)' == ''"/>

        <Warning
            Text="Missing or invalid GXDeployFileProject property. It should be set for command line deployments."
            Condition="('$(GENERATOR)' == 'C#' OR '$(GENERATOR)' == '.NET Framework' OR '$(GENERATOR)' == '.NET Core' or '$(GENERATOR)' == '.NET') AND !Exists('$(GXDeployFileProject)')" />
    
    </Target>

	<Target Name="CopySupportFiles" Condition="'$(GENERATOR)' == 'Java' AND '$(JavaFrameWork)' !='JAVA_FRAMEWORK_SPRINGBOOT'">
		<ItemGroup>
			<TomcatBaseFiles Include="$(GX_PROGRAM_DIR)/DeploymentTargets/Docker/tomcat/**/*.*"/>			
		</ItemGroup>
		<Copy
			SourceFiles="@(TomcatBaseFiles)"
			DestinationFolder="$(DeployDirectory)/tomcat/%(RecursiveDir)"/>
	</Target>

	<Target Name="SpringRedissonSupport">
	
		<ItemGroup>
			<LinesApplicationProperties Include="spring.redis.redisson.file=classpath:redisson.yaml" />
			<LinesApplicationProperties Include="spring.session.store-type=redis" />
			<LinesApplicationProperties Include="spring.session.timeout=${SESSION_TIMEOUT:30}m" />
		</ItemGroup>
		
		<WriteLinesToFile
			File="$(Deployfullpath)/application.properties"
			Lines="@(LinesApplicationProperties)"
			Overwrite="false"
			Encoding="UTF-8" />

	</Target>

	<Target Name="OpenTelemetrySupportJava" Condition="'$(OpenTelemetrySupport)' == 'true' AND '$(GENERATOR)' == 'Java' AND '$(JavaFrameWork)' !='JAVA_FRAMEWORK_SPRINGBOOT'">
		<Message Text="Adding OpenTelemetry support '$(ObservabilityProvider)'" Importance="High"/>			

		<ItemGroup>
			<OtelLibs Include="$(GX_PROGRAM_DIR)/Services/Observability/$(ObservabilityProvider)/services/*.*" />
		</ItemGroup>

		<Copy
			SourceFiles="@(OtelLibs)"
			DestinationFiles="$(DeployDirectory)/lib/applicationinsights-agent.jar" Condition="'$(ObservabilityProvider)' == 'AZUREMONITOR' AND '@(OtelLibs->Count())' == '1'"/>

		<Error Text="OpenTelemetry agent jar could not be found for Azure monitor."
			Condition="'$(ObservabilityProvider)' == 'AZUREMONITOR' AND '@(OtelLibs->Count())' != '1'" />

		<Copy
			SourceFiles="@(OtelLibs)"
			DestinationFolder="$(DeployDirectory)/lib" Condition="'$(ObservabilityProvider)' != 'AZUREMONITOR'"/>

		<PropertyGroup>
			<ScriptTemplates>$(GX_PROGRAM_DIR)/DeploymentTargets/Docker/scripts</ScriptTemplates>
		</PropertyGroup>

		<Copy
			SourceFiles="$(ScriptTemplates)/otelenv_OTEL.sh"
			DestinationFiles="$(DeployDirectory)/tomcat/bin/otelenv.sh" Condition="'$(ObservabilityProvider)' != 'AZUREMONITOR' AND Exists('$(ScriptTemplates)\otelenv_OTEL.sh')"/>
		
		<Copy
			SourceFiles="$(ScriptTemplates)/otelenv_AzureMonitor.sh"
			DestinationFiles="$(DeployDirectory)/tomcat/bin/otelenv.sh" Condition="'$(ObservabilityProvider)' == 'AZUREMONITOR' AND Exists('$(ScriptTemplates)\otelenv_AzureMonitor.sh')"/>	

	</Target>

</Project>