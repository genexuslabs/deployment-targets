<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Deploy"  ToolsVersion="4.0">
  <PropertyGroup>    
    <AWSLambdaDescriptor>$(GX_PROGRAM_DIR)\GeneXus.AWS.targets</AWSLambdaDescriptor>
    <GXDeployFileProject>$([System.IO.Path]::GetFullPath('$(DeployFullPath)\..\..\..\..\web\$(ProjectName).gxdproj'))</GXDeployFileProject>
    <LambdaOutputFile>$(DEPLOY_PATH)\AWS_Lambda_Package.zip</LambdaOutputFile>
    <OpenAPIForAWSServerlessOutputFile>$(DEPLOY_PATH)\api_gateway.swagger.json</OpenAPIForAWSServerlessOutputFile>
    <ApiGatewaySwaggerExtensionTemplate>template\aws-apigateway-swagger-lambda-extension.json</ApiGatewaySwaggerExtensionTemplate>
    <IAMPolicyJSONFile>template\aws-iam-policy.json</IAMPolicyJSONFile>
    <RoleARN>$(AWSSERVERLESS_LAMBDA_ROLE_NAME)</RoleARN>
    <AWSSERVERLESS_LAMBDA_FUNCTION_NAME>$(AWSSERVERLESS_APIGATEWAY_API_NAME)_$(AWSSERVERLESS_APIGATEWAY_STAGING_NAME)</AWSSERVERLESS_LAMBDA_FUNCTION_NAME>
    <S3BucketName>gx-deploy-$(AWSSERVERLESS_DEFAULT_REGION)-$(AWSSERVERLESS_ACCESS_KEY_ID)$(AWSSERVERLESS_PROFILE_NAME)</S3BucketName>    
  </PropertyGroup>
  

  <Import Project="$(GX_PROGRAM_DIR)\GeneXus.AWS.targets"/>
  <Import Project="$(GXDeployFileProject)"/>
  <Import Project= "createpackage.msbuild" Condition = "'$(CreateCloudPackage)' == '' or '$(CreateCloudPackage)' == 'true'" />  
  <Import Project="..\Common\AWS\awslambda-create-package.targets"/>
  
  <Target Name="Deploy" DependsOnTargets="ValidateDeployment;ValidateDeploySettings;OpenAPIGeneration">

    <CallTarget Targets="CreatePackage" Condition = "'$(CreateCloudPackage)' == '' or '$(CreateCloudPackage)' == 'true'"/>		
    
    <Error Text="Lambda Package does not exists" Condition="!Exists('$(LambdaOutputFile)')"/>

    <DeployLambdaFunction
        ProfileName='$(AWSSERVERLESS_PROFILE_NAME)'
        AccessKey='$(AWSSERVERLESS_ACCESS_KEY_ID)'
        SecretKey='$(AWSSERVERLESS_SECRET_ACCESS_KEY)'
        RegionName='$(AWSSERVERLESS_DEFAULT_REGION)'
        FunctionName='$(AWSSERVERLESS_LAMBDA_FUNCTION_NAME)'
        HandlerName='com.genexus.cloud.serverless.aws.LambdaHandler::handleRequest'
        S3BucketName='$(S3BucketName.ToLower())'
        ExecutionTimeout='30'
        RoleARN='$(AWSSERVERLESS_LAMBDA_ROLE_ARN)'
        MemorySize='$(AWSSERVERLESS_LAMBDA_MEMORY_SIZE)'
        GeneratorId='$(LANGUAGE)'
        UpdateConfiguration='false'
        Source='$(LambdaOutputFile)'>
      <Output TaskParameter="LambdaARN" PropertyName="LambdaARN"/>
    </DeployLambdaFunction>

    <YamlGenerator
        TemplateFile='$(ApiGatewaySwaggerExtensionTemplate)'
        SourceFile='$(OpenAPIDefinitionOutputFile)'
        DestinationFile='$(OpenAPIForAWSServerlessOutputFile)'
        APIName='$(AWSSERVERLESS_APIGATEWAY_API_NAME)'
        Credentials='$(AWSSERVERLESS_LAMBDA_ROLE_ARN)'
        URI='arn:aws:apigateway:$(AWSSERVERLESS_DEFAULT_REGION):lambda:path/2015-03-31/functions/$(LambdaARN)/invocations'
      />

    <DeployAPIGateway
        ProfileName='$(AWSSERVERLESS_PROFILE_NAME)'
        AccessKey='$(AWSSERVERLESS_ACCESS_KEY_ID)'
        SecretKey='$(AWSSERVERLESS_SECRET_ACCESS_KEY)'
        RegionName='$(AWSSERVERLESS_DEFAULT_REGION)'
        APIName='$(AWSSERVERLESS_APIGATEWAY_API_NAME)'
        StageName='$(AWSSERVERLESS_APIGATEWAY_STAGING_NAME)'
        SwaggerDefinitionFile='$(OpenAPIForAWSServerlessOutputFile)'>
      <Output TaskParameter="DeployURL" PropertyName="DeployURL"/>
    </DeployAPIGateway>
	  
    <Message Text="Service API deployed at: $(DeployURL)" Importance="high" />
	  
  </Target>

  <Target Name="ValidateDeploySettings">
    <Error
        Text="AWS Serverless deployment failed: AWS Credentials are missing. Please use AWS Profile Name or Custom Access Key (Access Key ID and Secret Key)"
        Condition="$(AWSSERVERLESS_PROFILE_NAME) == '' And ($(AWSSERVERLESS_ACCESS_KEY_ID) == '' Or $(AWSSERVERLESS_SECRET_ACCESS_KEY) == '')"/>
      <Error
        Text="AWS Serverless deployment failed: AWS Region is missing."
        Condition="$(AWSSERVERLESS_DEFAULT_REGION) == ''"/>

      <Error
      Text="AWS Serverless deployment failed: Application Name is required."
      Condition="$(AWSSERVERLESS_APIGATEWAY_API_NAME) == ''"/>

      <Error
        Text="AWS Serverless deployment failed: Stage Name is required."
        Condition="$(AWSSERVERLESS_APIGATEWAY_STAGING_NAME) == ''"/>

      <Error
        Text="AWS Serverless deployment failed: IAM Role ARN is required."
        Condition="$(AWSSERVERLESS_LAMBDA_ROLE_ARN) == ''"/>
  </Target>
</Project>
